// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: ticket/ticket.proto

package ticket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	CreateTicketType(ctx context.Context, in *CreateTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error)
	GetTicketType(ctx context.Context, in *GetTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error)
	UpdateTicketType(ctx context.Context, in *UpdateTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error)
	GetPartyTicketTypes(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTicketTypes, error)
	JoinParty(ctx context.Context, in *JoinPartyRequest, opts ...grpc.CallOption) (*Ticket, error)
	LeaveParty(ctx context.Context, in *LeavePartyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTicketsByUser(ctx context.Context, in *GetTicketsByUserRequest, opts ...grpc.CallOption) (*ManyTickets, error)
	GetTicketsByParty(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTickets, error)
	GetTicketsByUserAndParty(ctx context.Context, in *UserPartyRequest, opts ...grpc.CallOption) (*ManyTickets, error)
	GetTicketRequestsByParty(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTickets, error)
	GetParticipantsCount(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*GetParticipantsCountResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) CreateTicketType(ctx context.Context, in *CreateTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/CreateTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketType(ctx context.Context, in *GetTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateTicketType(ctx context.Context, in *UpdateTicketTypeRequest, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/UpdateTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetPartyTicketTypes(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTicketTypes, error) {
	out := new(ManyTicketTypes)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetPartyTicketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) JoinParty(ctx context.Context, in *JoinPartyRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/JoinParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) LeaveParty(ctx context.Context, in *LeavePartyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/LeaveParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketsByUser(ctx context.Context, in *GetTicketsByUserRequest, opts ...grpc.CallOption) (*ManyTickets, error) {
	out := new(ManyTickets)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetTicketsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketsByParty(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTickets, error) {
	out := new(ManyTickets)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetTicketsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketsByUserAndParty(ctx context.Context, in *UserPartyRequest, opts ...grpc.CallOption) (*ManyTickets, error) {
	out := new(ManyTickets)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetTicketsByUserAndParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketRequestsByParty(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*ManyTickets, error) {
	out := new(ManyTickets)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetTicketRequestsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetParticipantsCount(ctx context.Context, in *PartyRequest, opts ...grpc.CallOption) (*GetParticipantsCountResponse, error) {
	out := new(GetParticipantsCountResponse)
	err := c.cc.Invoke(ctx, "/ticket.TicketService/GetParticipantsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	CreateTicketType(context.Context, *CreateTicketTypeRequest) (*TicketType, error)
	GetTicketType(context.Context, *GetTicketTypeRequest) (*TicketType, error)
	UpdateTicketType(context.Context, *UpdateTicketTypeRequest) (*TicketType, error)
	GetPartyTicketTypes(context.Context, *PartyRequest) (*ManyTicketTypes, error)
	JoinParty(context.Context, *JoinPartyRequest) (*Ticket, error)
	LeaveParty(context.Context, *LeavePartyRequest) (*emptypb.Empty, error)
	GetTicketsByUser(context.Context, *GetTicketsByUserRequest) (*ManyTickets, error)
	GetTicketsByParty(context.Context, *PartyRequest) (*ManyTickets, error)
	GetTicketsByUserAndParty(context.Context, *UserPartyRequest) (*ManyTickets, error)
	GetTicketRequestsByParty(context.Context, *PartyRequest) (*ManyTickets, error)
	GetParticipantsCount(context.Context, *PartyRequest) (*GetParticipantsCountResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) CreateTicketType(context.Context, *CreateTicketTypeRequest) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketType not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketType(context.Context, *GetTicketTypeRequest) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketType not implemented")
}
func (UnimplementedTicketServiceServer) UpdateTicketType(context.Context, *UpdateTicketTypeRequest) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketType not implemented")
}
func (UnimplementedTicketServiceServer) GetPartyTicketTypes(context.Context, *PartyRequest) (*ManyTicketTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyTicketTypes not implemented")
}
func (UnimplementedTicketServiceServer) JoinParty(context.Context, *JoinPartyRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinParty not implemented")
}
func (UnimplementedTicketServiceServer) LeaveParty(context.Context, *LeavePartyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveParty not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketsByUser(context.Context, *GetTicketsByUserRequest) (*ManyTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByUser not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketsByParty(context.Context, *PartyRequest) (*ManyTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByParty not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketsByUserAndParty(context.Context, *UserPartyRequest) (*ManyTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByUserAndParty not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketRequestsByParty(context.Context, *PartyRequest) (*ManyTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketRequestsByParty not implemented")
}
func (UnimplementedTicketServiceServer) GetParticipantsCount(context.Context, *PartyRequest) (*GetParticipantsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantsCount not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_CreateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).CreateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/CreateTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).CreateTicketType(ctx, req.(*CreateTicketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketType(ctx, req.(*GetTicketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/UpdateTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateTicketType(ctx, req.(*UpdateTicketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetPartyTicketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetPartyTicketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetPartyTicketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetPartyTicketTypes(ctx, req.(*PartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_JoinParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).JoinParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/JoinParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).JoinParty(ctx, req.(*JoinPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_LeaveParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).LeaveParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/LeaveParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).LeaveParty(ctx, req.(*LeavePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetTicketsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketsByUser(ctx, req.(*GetTicketsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetTicketsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketsByParty(ctx, req.(*PartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketsByUserAndParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketsByUserAndParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetTicketsByUserAndParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketsByUserAndParty(ctx, req.(*UserPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketRequestsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketRequestsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetTicketRequestsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketRequestsByParty(ctx, req.(*PartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetParticipantsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetParticipantsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.TicketService/GetParticipantsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetParticipantsCount(ctx, req.(*PartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicketType",
			Handler:    _TicketService_CreateTicketType_Handler,
		},
		{
			MethodName: "GetTicketType",
			Handler:    _TicketService_GetTicketType_Handler,
		},
		{
			MethodName: "UpdateTicketType",
			Handler:    _TicketService_UpdateTicketType_Handler,
		},
		{
			MethodName: "GetPartyTicketTypes",
			Handler:    _TicketService_GetPartyTicketTypes_Handler,
		},
		{
			MethodName: "JoinParty",
			Handler:    _TicketService_JoinParty_Handler,
		},
		{
			MethodName: "LeaveParty",
			Handler:    _TicketService_LeaveParty_Handler,
		},
		{
			MethodName: "GetTicketsByUser",
			Handler:    _TicketService_GetTicketsByUser_Handler,
		},
		{
			MethodName: "GetTicketsByParty",
			Handler:    _TicketService_GetTicketsByParty_Handler,
		},
		{
			MethodName: "GetTicketsByUserAndParty",
			Handler:    _TicketService_GetTicketsByUserAndParty_Handler,
		},
		{
			MethodName: "GetTicketRequestsByParty",
			Handler:    _TicketService_GetTicketRequestsByParty_Handler,
		},
		{
			MethodName: "GetParticipantsCount",
			Handler:    _TicketService_GetParticipantsCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/ticket.proto",
}
