// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Provider string

const (
	ProviderGOOGLE   Provider = "GOOGLE"
	ProviderFACEBOOK Provider = "FACEBOOK"
	ProviderAPPLE    Provider = "APPLE"
)

func (e *Provider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Provider(s)
	case string:
		*e = Provider(s)
	default:
		return fmt.Errorf("unsupported scan type for Provider: %T", src)
	}
	return nil
}

type NullProvider struct {
	Provider Provider
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProvider) Scan(value interface{}) error {
	if value == nil {
		ns.Provider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Provider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Provider, nil
}

type Type string

const (
	TypeUSER    Type = "USER"
	TypeADMIN   Type = "ADMIN"
	TypeDEV     Type = "DEV"
	TypeCOMPANY Type = "COMPANY"
)

func (e *Type) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Type(s)
	case string:
		*e = Type(s)
	default:
		return fmt.Errorf("unsupported scan type for Type: %T", src)
	}
	return nil
}

type NullType struct {
	Type  Type
	Valid bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullType) Scan(value interface{}) error {
	if value == nil {
		ns.Type, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Type.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Type, nil
}

type Account struct {
	ID                     string
	Email                  string
	EmailVerified          bool
	EmailCode              sql.NullString
	PasswordHash           sql.NullString
	RefreshTokenGeneration int16
	Provider               NullProvider
	Type                   Type
}
